#include <iostream>
#include<vector>
#include <list>

using namespace std; 
class Graph
{ 
    int V; // No. of vertices in graph 
    list<int>* adj; // Pointer to an array containing adjacency lists 
  
    // A recursive function used by printAllPaths() 
    void printAllPathsUtil(int, int, bool[], int[], int&); 
  
public: 
     vector<vector<int>> vect
    {
        
        {1,1,1,1}, 
        {0,0,1,1}, 
        {0,1,0,1},
        {0,1,1,0},
        {1,1,0,1},
        {0,1,0,0},
        {0,0,0,1},
        {1,1,1,0},
        {1,0,1,1},
        {0,0,1,0},
        {1,0,1,0},
        {0,0,0,0}
    };
    Graph(int V); // Constructor 
    void addEdge(int u, int v); 
    void printAllPaths(int s, int d); 
}; 
  
Graph::Graph(int V) 
{ 
    this->V = V; 
    adj = new list<int>[V]; 
} 
  
void Graph::addEdge(int u, int v) 
{ 
    adj[u].push_back(v); // Add v to uâ€™s list. 
} 
  
// Prints all paths from 's' to 'd' 
void Graph::printAllPaths(int s, int d) 
{ 
    // Mark all the vertices as not visited 
    bool* visited = new bool[V]; 
  
    // Create an array to store paths 
    int* path = new int[V]; 
    int path_index = 0; // Initialize path[] as empty 
  
    // Initialize all vertices as not visited 
    for (int i = 0; i < V; i++) 
        visited[i] = false; 
  
    // Call the recursive helper function to print all paths 
    printAllPathsUtil(s, d, visited, path, path_index); 
} 
  
// A recursive function to print all paths from 'u' to 'd'. 
// visited[] keeps track of vertices in current path. 
// path[] stores actual vertices and path_index is current 
// index in path[] 
void Graph::printAllPathsUtil(int u, int d, bool visited[], 
                              int path[], int& path_index) 
{ 
    // Mark the current node and store it in path[] 
    visited[u] = true; 
    path[path_index] = u; 
    path_index++; 

    // If current vertex is same as destination, then print 
    // current path[] 
    if (u == d)
    {
        int t;
        for (int i = 0; i < path_index; i++) 
       {
            t=path[i];
            for(int j=0;j<vect[t].size();j++)
            {
             cout<<vect[t][j];
            }
             cout<<"  "; 
             if(t==11)
             cout<<"\n";
        }
    
       
    } 
    else // If current vertex is not destination 
    { 
        // Recur for all the vertices adjacent to current vertex 
        list<int>::iterator i; 
        for (i = adj[u].begin(); i != adj[u].end(); ++i) 
            if (!visited[*i]) 
                printAllPathsUtil(*i, d, visited, path, path_index); 
    } 
  
    // Remove current vertex from path[] and mark it as unvisited 
    path_index--; 
    visited[u] = false; 
} 

int main()
{

    Graph g(12); 
    g.addEdge(0, 1); 
    g.addEdge(0, 2); 
    g.addEdge(0, 3); 
    g.addEdge(2, 4); 
    g.addEdge(2, 0); 
    g.addEdge(4,5); 
    g.addEdge(4,6);
    g.addEdge(4,2);
    g.addEdge(5,4);
    g.addEdge(5,7);
    g.addEdge(6,4);
    g.addEdge(6,8);
    g.addEdge(7,5);
    g.addEdge(7,9);
    g.addEdge(8,9);
    g.addEdge(8,6);
    g.addEdge(9,10);
    g.addEdge(10,11);
  
    int s = 0, d = 11; 
    cout<<"WOLF GOAT CABBAGE  PROBLEM\n";
    cout<<"Each state is represented as [MWGC]\n";
    cout << "Following are all different paths using dfs" <<endl; 
    g.printAllPaths(s, d); 
  
    return 0;
}
